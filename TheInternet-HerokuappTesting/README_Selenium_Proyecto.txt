üßæ README ‚Äî Proyecto de Automatizaci√≥n con Selenium (Java)

üìå Descripci√≥n General
Este proyecto contiene una serie de pruebas automatizadas E2E (end-to-end) realizadas con Selenium WebDriver, TestNG y Java, enfocadas en validar funcionalidades del sitio de pr√°ctica The Internet (https://the-internet.herokuapp.com/).

El objetivo principal es demostrar habilidades en automatizaci√≥n de pruebas funcionales, manejo de elementos din√°micos, autenticaci√≥n, formularios complejos y validaci√≥n de carga/descarga de archivos.

‚öôÔ∏è Tecnolog√≠as Utilizadas
- Lenguaje: Java
- Framework de pruebas: TestNG
- Automatizaci√≥n Web: Selenium WebDriver
- IDE recomendado: IntelliJ IDEA
- JDK recomendado: JDK 17
- Gesti√≥n de dependencias: Maven
- Navegador: Google Chrome (v140 o superior)
- Driver: ChromeDriver compatible con la versi√≥n del navegador


üöÄ Casos Automatizados

1Ô∏è‚É£ Formularios Complejos (/checkboxes, /dropdown, /dynamic_controls)
- Selecci√≥n y deselecci√≥n de checkboxes.
- Validaci√≥n de selecci√≥n en dropdowns.
- Habilitar/deshabilitar campos din√°micos.
- Verificaci√≥n de mensajes de √©xito tras cada acci√≥n.

2Ô∏è‚É£ Autenticaci√≥n (/login)
Credenciales v√°lidas:
Usuario: tomsmith
Contrase√±a: SuperSecretPassword!
- Login exitoso y fallido.
- Validaci√≥n de mensajes de alerta.
- Prevenci√≥n de alerta de guardado de contrase√±a en Chrome.

3Ô∏è‚É£ Elementos Din√°micos (/dynamic_loading/1 y /dynamic_loading/2)
- Detecci√≥n y espera de elementos cargados din√°micamente.

4Ô∏è‚É£ Carga y Descarga de Archivos (/upload y /download)
- Subida de archivos desde el sistema local.
- Validaci√≥n del nombre del archivo subido.
- Descarga y verificaci√≥n del archivo descargado.

üí¨ Ejecuci√≥n de las Pruebas
1. Clonar el repositorio
   git clone https://github.com/bralquibar-arch/selenium-automation.git
   cd selenium-automation

2. Instalar dependencias
   mvn clean install

3. Ejecutar todas las pruebas
   mvn test

4. O ejecutar una clase espec√≠fica
   mvn -Dtest=AuthenticationLogin test

üß† Buenas Pr√°cticas Implementadas
- Uso de Page Object Model (POM).
- Esperas expl√≠citas (WebDriverWait).
- Configuraci√≥n avanzada de Chrome.
- Asserts claros y mensajes personalizados.
- Commits descriptivos.

üßæ Ejemplo de Commits Descriptivos
git commit -m "Implementaci√≥n de pruebas E2E para login exitoso y fallido"
git commit -m "Automatizaci√≥n de formularios complejos con checkboxes y dropdowns"
git commit -m "Agregadas pruebas para elementos din√°micos (dynamic_loading)"
git commit -m "Automatizadas pruebas de carga y descarga de archivos"
git commit -m "Optimizaci√≥n de tiempos de espera y manejo de popups en Chrome"

üß© Pr√≥ximas Extensiones
- Integrar Allure Reports.
- Ejecuci√≥n paralela con TestNG XML Suite.
- Integraci√≥n continua con GitHub Actions o Jenkins.
