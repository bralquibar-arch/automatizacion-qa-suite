{
	"info": {
		"_postman_id": "8d2b3ca3-c936-444d-9cd8-7b1c2b8af857",
		"name": "JSONPlaceholder API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39493750"
	},
	"item": [
		{
			"name": "CRUD COMPLETO Y VALIDACION DE DATOS",
			"item": [
				{
					"name": "READ(GET)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get responde 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta tiene posts\", function () {\r",
									"\r",
									"    var resjson = pm.response.json();\r",
									"    pm.expect(resjson.length).to.be.above(0);\r",
									"\r",
									"});\r",
									"\r",
									"const resschema = {\r",
									"\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"number\" },\r",
									"      \"title\": { \"type\": \"string\" },\r",
									"      \"body\": { \"type\": \"string\" },\r",
									"      \"userId\": { \"type\": \"number\" }\r",
									"\r",
									"    },\r",
									"\r",
									"    \"required\": [\"id\", \"title\", \"body\", \"userId\"]\r",
									"\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Esquema de lista correcto de respuesta GET  \", function () {\r",
									"    pm.response.to.have.jsonSchema(resschema);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE(POST)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Post responde 201\", function () {\r",
									"\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Datos creados correctamente\", function () {\r",
									"\r",
									"    var resjson = pm.response.json();\r",
									"    pm.expect(resjson.title).to.eql(\"Titulo Post\");\r",
									"    pm.expect(resjson.body).to.eql(\"Prueba CRUD\");\r",
									"    pm.expect(resjson.userId).to.eql(1);\r",
									"\r",
									"});\r",
									"\r",
									"const resschema = {\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"\r",
									"    \"id\": { \"type\": \"number\" },\r",
									"    \"title\": { \"type\": \"string\" },\r",
									"    \"body\": { \"type\": \"string\" },\r",
									"    \"userId\": { \"type\": \"number\" }\r",
									"\r",
									"  },\r",
									"\r",
									"  \"required\": [\"id\", \"title\", \"body\", \"userId\"]\r",
									"\r",
									"};\r",
									"\r",
									"pm.test(\"Esquema correcto de respuesta POST\", function () {\r",
									"\r",
									"    pm.response.to.have.jsonSchema(resschema);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Titulo Post\",\r\n  \"body\": \"Prueba CRUD\",\r\n  \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE(PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El PUT devuelve 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Validar datos actualizados\", function () {\r",
									"\r",
									"    var resjson = pm.response.json();\r",
									"    pm.expect(resjson.title).to.eql(\"Titulo actualizado\");\r",
									"    pm.expect(resjson.body).to.eql(\"Contenido actualizado pruebas CRUD\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"const resschema = {\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\":\r",
									"   {\r",
									"    \"id\": { \"type\": \"number\" },\r",
									"    \"title\": { \"type\": \"string\" },\r",
									"    \"body\": { \"type\": \"string\" },\r",
									"    \"userId\": { \"type\": \"number\" }\r",
									"\r",
									"  },\r",
									"\r",
									"  \"required\": [\"id\", \"title\", \"body\", \"userId\"]\r",
									"\r",
									"};\r",
									"\r",
									"pm.test(\"Esquema correcto de respuesta PUT\", function () {\r",
									"    pm.response.to.have.jsonSchema(resschema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"title\": \"Titulo actualizado\",\r\n  \"body\": \"Contenido actualizado pruebas CRUD\",\r\n  \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE(DELETE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El DELETE devuelve 200 o 204\", function () {\r",
									"\r",
									" pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Devuelve objeto vacÃ­o o status correcto\", function () {\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RELACIONES",
			"item": [
				{
					"name": "posts/{id}/comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resschema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"postId\": { \"type\": \"number\" },\r",
									"      \"id\": { \"type\": \"number\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"      \"body\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"postId\", \"id\", \"name\", \"email\", \"body\"]\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Esquema de comentarios Correcta\", function () {\r",
									"    pm.response.to.have.jsonSchema(resschema);\r",
									"});\r",
									"\r",
									"pm.test(\"Los comentarios pertenecen al post 15\", function () {\r",
									"    const comments = pm.response.json();\r",
									"    comments.forEach(c => pm.expect(c.postId).to.eql(15));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/15/comments",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"15",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resschema = {\r",
									"\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"userId\": { \"type\": \"number\" },\r",
									"      \"id\": { \"type\": \"number\" },\r",
									"      \"title\": { \"type\": \"string\" },\r",
									"      \"body\": { \"type\": \"string\" }\r",
									"    },\r",
									"\r",
									"    \"required\": [\"userId\", \"id\", \"title\", \"body\"]\r",
									"\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Esquema de posts por usuario correcta\", function () {\r",
									"\r",
									"    pm.response.to.have.jsonSchema(resschema);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Todos los posts pertenezcan al user 10\", function () {\r",
									"    const posts = pm.response.json();\r",
									"    posts.forEach(p => pm.expect(p.userId).to.eql(10));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/10/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"10",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CASOS NEGATIVOS",
			"item": [
				{
					"name": "IDS INEXISTENTE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID inexistente devuelve vacÃ­o\", function () {\r",
									"\r",
									"    const resbody = pm.response.json();\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
									"    pm.expect(Object.keys(resbody).length).to.eql(0);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/998",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"998"
							]
						}
					},
					"response": []
				},
				{
					"name": "PAYLOADS INVALIDOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resschema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userId\": { \"type\": \"number\" }\r",
									"  },\r",
									"  \"required\": [\"userId\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Payload invÃ¡lido, no debe crear un recurso vÃ¡lido\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422, 201]); // \r",
									"    pm.response.to.not.have.jsonSchema(resschema); \r",
									"});\r",
									"\r",
									"pm.test(\"La API devuelve 201 aunque el payload es invÃ¡lido\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"    console.warn(\"â ï¸ BUG: La API deberÃ­a rechazar el payload invÃ¡lido, pero lo acepta.\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta no cumple con el schema esperado\", function () {\r",
									"    pm.response.to.not.have.jsonSchema(resschema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Userid\": \"PRUEBA PAYLOADS INVALIDOS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "METODO NO PERMITIDO (PUT NO PERMITIDO EN POST)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT no permitido en posts,debe fallar\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([405, 400, 404]); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "METODO NO PERMITIDO (DELTE SIN ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE sin ID no deberÃ­a estar permitido\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([405, 400, 404]); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\" Tiempo de respuesta menor a 2s\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"});"
				]
			}
		}
	]
}