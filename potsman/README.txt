Estructura de la colecciÃ³n JSONPlaceholder API Testing.collection

CRUD bÃ¡sico (/posts)

GET /posts â†’ Lista de posts.

GET /posts/{id} â†’ Consulta un post por ID.

POST /posts â†’ Crea un nuevo post.

PUT /posts/{id} â†’ Actualiza un post existente.

DELETE /posts/{id} â†’ Elimina un post.

Relaciones

GET /posts/{id}/comments â†’ Comentarios de un post.

GET /users/{id}/posts â†’ Posts de un usuario.

Casos negativos

IDs inexistentes.

Payloads invÃ¡lidos.

MÃ©todos no permitidos (PUT /posts, PATCH /posts/1, DELETE /posts).

Performance

ValidaciÃ³n de tiempo de respuesta < 2 segundos.

ValidaciÃ³n de tamaÃ±o de respuesta (< 1 MB).

âœ… Validaciones incluidas

Status codes esperados (200, 201, 204, 400, 404, 405).

Esquema JSON: validaciÃ³n de campos requeridos y tipos de datos.

Casos negativos: asegurando que la API no acepte datos invÃ¡lidos.

Performance: tiempo de respuesta y tamaÃ±o de respuesta.

ðŸ”§ EjecuciÃ³n en Postman

Importar el archivo collection.json.

Ejecutar manualmente los requests o correr toda la colecciÃ³n.

Revisar los tests en la pestaÃ±a Tests de cada request o en el Collection Runner.

ðŸ”¨ EjecuciÃ³n con Newman

Instalar Newman (si no lo tienes):

npm install -g newman


Ejecutar la colecciÃ³n:

newman run collection.json


Generar reporte HTML:

newman run collection.json -r html


El reporte se genera en un archivo newman.html que muestra:

NÃºmero total de pruebas.

Resultados (pasadas/fallidas).

Tiempos de respuesta por request.

ðŸ“Š Evidencias

Archivo JSON de la colecciÃ³n (collection.json).

Reporte HTML de Newman (newman.html).

///////////////////////////////////////////////////


Estructura de la colecciÃ³n ReqRes API Testing

AutenticaciÃ³n (/api/login, /api/register)

POST /api/login â†’ Login exitoso con credenciales vÃ¡lidas.
POST /api/login â†’ Login fallido con credenciales invÃ¡lidas o incompletas.
POST /api/register â†’ Registro exitoso de nuevo usuario.
POST /api/register â†’ Registro fallido (falta de parÃ¡metros).

GestiÃ³n de usuarios (CRUD en /api/users)

GET /api/users â†’ Lista de usuarios.
GET /api/users/{id} â†’ Consulta un usuario por ID.
POST /api/users â†’ Crea un nuevo usuario.
PUT /api/users/{id} â†’ Actualiza un usuario existente.
DELETE /api/users/{id} â†’ Elimina un usuario.

PaginaciÃ³n (/api/users?page=2)

GET /api/users?page=2 â†’ Valida respuestas paginadas (nÃºmero de pÃ¡gina, cantidad de registros, total de pÃ¡ginas, etc.).

Rate Limiting (SimulaciÃ³n)

GET /api/users?page=1 â†’ DetecciÃ³n de lÃ­mites de requests (429 Too Many Requests).
ValidaciÃ³n de encabezados:
- X-RateLimit-Limit
- X-RateLimit-Remaining

Casos negativos

- IDs inexistentes en /api/users/{id}
- Campos faltantes o payloads invÃ¡lidos en /api/login y /api/register
- MÃ©todos no permitidos (PUT /api/users, PATCH /api/users/1, DELETE /api/users)
- ValidaciÃ³n de respuesta vacÃ­a o error 404 cuando el recurso no existe

Performance

- ValidaciÃ³n de tiempo de respuesta < 2 segundos
- ValidaciÃ³n de tamaÃ±o de respuesta < 1 MB

Validaciones incluidas

- Status codes esperados: 200, 201, 204, 400, 404, 429
- Esquema JSON: validaciÃ³n de campos requeridos y tipos de datos
- Casos negativos: asegura que la API no acepte datos invÃ¡lidos
- Performance: tiempos de respuesta y tamaÃ±o de payload
- Rate Limiting: manejo de error 429 Too Many Requests

EjecuciÃ³n en Postman

1. Importar el archivo ReqRes_API_Collection.json.
2. Configurar el entorno si es necesario (variables base URL).
3. Ejecutar manualmente los requests o correr toda la colecciÃ³n desde el Collection Runner.
4. Verificar los resultados en la pestaÃ±a Tests o en el resumen de ejecuciÃ³n.

EjecuciÃ³n con Newman

Instalar Newman (si no lo tienes):
npm install -g newman

Ejecutar la colecciÃ³n:
newman run ReqRes_API_Collection.json

Generar reporte HTML:
newman run ReqRes_API_Collection.json -r html

El reporte newman.html incluye:
- NÃºmero total de pruebas ejecutadas
- Resultados (pasadas/fallidas)
- CÃ³digos de estado devueltos
- Tiempos de respuesta por request

Evidencias

- Archivo JSON de la colecciÃ³n: ReqRes_API_Collection.json
- Reporte HTML de Newman: newman.html
- README.md: DocumentaciÃ³n tÃ©cnica y de ejecuciÃ³n
